/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import broker.DatabaseConnection;
import domen.Instruktor;
import domen.Kategorija;
import domen.PlanObuke;
import domen.Polaznik;
import domen.StavkaEvidencijeCasa;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kontroleri.KontrolerKategorija;
import kontroleri.KontrolerPolaznik;

/**
 *
 * @author Windows HD
 */
public class Glavna extends javax.swing.JFrame {

    /**
     * Creates new form Glavna
     */
    public Glavna() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    Instruktor i;
    Integer cenaObuke=0;
    public Glavna(Instruktor i) throws SQLException{
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.i=i;
        
        lblInstruktor.setText(i.getKorisnickoIme());
        
        List<Polaznik> polaznici = KontrolerPolaznik.getList(i);
        for(Polaznik p : polaznici){
            cmbPolaznik.addItem(p);
        }
        Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
        TableModel tm = tblCasovi.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);
        //lista stavki
        Connection conn = DatabaseConnection.getInstance();
        String query="SELECT * FROM stavkaevidencijecasa JOIN planobuke ON planobuke.id=stavkaevidencijecasa.idPlanObuke JOIN evidencijacasa ON evidencijacasa.id=stavkaevidencijecasa.id JOIN instruktor \n" +
        "ON  evidencijacasa.idInstruktor=instruktor.id JOIN polaznik ON polaznik.id=evidencijacasa.idPolaznika \n" +
        "WHERE instruktor.id=? AND polaznik.id=?";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setLong(1, i.getId());
        ps.setLong(2, p.getId());
        ResultSet rs = ps.executeQuery();
        List<StavkaEvidencijeCasa> stavke = new LinkedList<StavkaEvidencijeCasa>();
        while(rs.next()){
            StavkaEvidencijeCasa stavka = new StavkaEvidencijeCasa
                (rs.getLong("id"), rs.getLong("rb"), rs.getDate("datumCasa"), rs.getTime("vremePocetkaCasa").toLocalTime(), 
                rs.getTime("vremeKrajaCasa").toLocalTime(), rs.getInt("trajanjeCasa"), rs.getInt("cenaCasa"), 
                rs.getString("komentar"), new PlanObuke(rs.getLong("idPlanObuke"), rs.getString("naziv"), rs.getString("opis"), rs.getInt("trajanje")));
            
            stavke.add(stavka);
        }
        for(StavkaEvidencijeCasa s: stavke){
            Object[] red = new Object[]{s.getRb(),s.getDatumCasa(),s.getTrajanjeCasa(),s.getCenaCasa()};
            cenaObuke+=s.getCenaCasa();
            dtm.addRow(red);
        }
//        txtCenaObuke.setText(cenaObuke.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblInstruktor = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(120, 0), new java.awt.Dimension(32767, 0));
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCasovi = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cmbPolaznik = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBrTel = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDatumRodj = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        cmbKategorija = new javax.swing.JComboBox<>();
        btnObrisiPolaznik = new javax.swing.JButton();
        btnIzmena = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnObrisiCas = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        meniNalog = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(565, 50));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 20, 15));

        jLabel1.setText("Dobrodosao/la");
        jPanel2.add(jLabel1);

        lblInstruktor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblInstruktor.setText("username");
        jPanel2.add(lblInstruktor);
        jPanel2.add(filler1);

        jTextField1.setPreferredSize(new java.awt.Dimension(100, 22));
        jPanel2.add(jTextField1);

        jButton1.setText("Pretrazi");
        jPanel2.add(jButton1);

        jPanel1.add(jPanel2);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        tblCasovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Redni broj", "Datum casa", "Trajanje casa", "Cena casa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCasovi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCasoviMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCasovi);

        jPanel4.add(jScrollPane1);

        jPanel5.setMaximumSize(new java.awt.Dimension(325, 32767));
        jPanel5.setPreferredSize(new java.awt.Dimension(325, 423));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setPreferredSize(new java.awt.Dimension(325, 400));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 20));

        cmbPolaznik.setMaximumSize(new java.awt.Dimension(300, 32767));
        cmbPolaznik.setMinimumSize(new java.awt.Dimension(300, 22));
        cmbPolaznik.setPreferredSize(new java.awt.Dimension(300, 22));
        cmbPolaznik.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPolaznikItemStateChanged(evt);
            }
        });
        cmbPolaznik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPolaznikActionPerformed(evt);
            }
        });
        jPanel3.add(cmbPolaznik);

        jLabel3.setText("Ime:");
        jLabel3.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel3);

        txtIme.setEditable(false);
        txtIme.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(txtIme);

        jLabel4.setText("Prezime:");
        jLabel4.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel4);

        txtPrezime.setEditable(false);
        txtPrezime.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(txtPrezime);

        jLabel5.setText("Email:");
        jLabel5.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel5);

        txtEmail.setEditable(false);
        txtEmail.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(txtEmail);

        jLabel6.setText("Broj telefona:");
        jLabel6.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel6);

        txtBrTel.setEditable(false);
        txtBrTel.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(txtBrTel);

        jLabel7.setText("Datum rodjenja:");
        jLabel7.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel7);

        txtDatumRodj.setEnabled(false);
        txtDatumRodj.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(txtDatumRodj);

        jLabel8.setText("Kategorija:");
        jLabel8.setPreferredSize(new java.awt.Dimension(90, 20));
        jPanel3.add(jLabel8);

        cmbKategorija.setEnabled(false);
        cmbKategorija.setPreferredSize(new java.awt.Dimension(200, 25));
        jPanel3.add(cmbKategorija);

        btnObrisiPolaznik.setForeground(new java.awt.Color(255, 51, 51));
        btnObrisiPolaznik.setText("Ispisi polaznika");
        btnObrisiPolaznik.setPreferredSize(new java.awt.Dimension(125, 45));
        btnObrisiPolaznik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiPolaznikActionPerformed(evt);
            }
        });
        jPanel3.add(btnObrisiPolaznik);

        btnIzmena.setForeground(new java.awt.Color(0, 0, 255));
        btnIzmena.setText("Omoguci izmenu");
        btnIzmena.setPreferredSize(new java.awt.Dimension(125, 45));
        btnIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmenaActionPerformed(evt);
            }
        });
        jPanel3.add(btnIzmena);

        jPanel5.add(jPanel3);

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        jPanel6.setLayout(flowLayout1);

        btnObrisiCas.setForeground(new java.awt.Color(255, 51, 51));
        btnObrisiCas.setText("Obrisi cas");
        btnObrisiCas.setEnabled(false);
        btnObrisiCas.setPreferredSize(new java.awt.Dimension(250, 45));
        btnObrisiCas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiCasActionPerformed(evt);
            }
        });
        jPanel6.add(btnObrisiCas);

        jPanel5.add(jPanel6);

        jPanel4.add(jPanel5);

        jPanel1.add(jPanel4);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Kreiraj");

        jMenuItem1.setText("Polaznik");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Instruktor");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Cas");
        jMenu1.add(jMenuItem3);

        jMenuItem7.setText("Plan obuke");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Izmeni");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem4.setText("Polaznik");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Instruktor");
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Cas");
        jMenu2.add(jMenuItem6);

        jMenuItem10.setText("Plan obuke");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        meniNalog.setText("Nalog");

        jMenuItem8.setText("Prikazi");
        meniNalog.add(jMenuItem8);

        jMenuItem9.setText("Odjavite se");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        meniNalog.add(jMenuItem9);

        jMenuBar1.add(meniNalog);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            new DodavanjePolaznika(this, true).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void cmbPolaznikItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPolaznikItemStateChanged
        try {
            Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
            txtIme.setText(p.getIme());
            txtPrezime.setText(p.getPrezime());
            txtEmail.setText(p.getEmail());
            txtBrTel.setText(p.getBrojTelefona());
            txtDatumRodj.setDate(p.getDatumRodjenja());
            List<Kategorija> kategorije = KontrolerKategorija.getList();
            for (Kategorija k : kategorije){
                cmbKategorija.addItem(k);
            }
            cmbKategorija.setSelectedItem(p.getKategorija());
            
            btnIzmena.setText("Omoguci izmenu");
            txtIme.setEditable(false);
            txtPrezime.setEditable(false);
            txtBrTel.setEditable(false);
            txtDatumRodj.setEnabled(false);
            txtEmail.setEditable(false);
            cmbKategorija.setEnabled(false);
            
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbPolaznikItemStateChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
        new Registracija().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void btnObrisiPolaznikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiPolaznikActionPerformed
        try {
            Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
            Object[] opcije = {"Da", "Ne"};
            int izbor = JOptionPane.showOptionDialog(this,"Da li sigurno zelite da ispisete polaznika "
                    +p.getIme()+" "+p.getPrezime()+"?","Ispisivanje polaznika",
                    JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcije,opcije[1]);

            if(izbor == JOptionPane.YES_OPTION){
                Connection conn = DatabaseConnection.getInstance();
                Statement st = conn.createStatement();
                String query2 = "SELECT id FROM evidencijacasa WHERE idPolaznika="+p.getId() +" AND idInstruktor="+i.getId();
                ResultSet rs = st.executeQuery(query2);
                rs.next();
                Long idCasa = rs.getLong(1);
                String query = "UPDATE polaznik SET STATUS='upisan' WHERE id="+p.getId();
                st.executeUpdate(query);
                st.close();
                cmbPolaznik.removeItem(p);
                JOptionPane.showMessageDialog(null, "Polaznik "+p.getIme()+" "+p.getPrezime() +" uspesno ispisan.","Ispisivanje polaznika",JOptionPane.INFORMATION_MESSAGE);
            }
            
            
//            Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
//            Object[] opcije = {"Da", "Ne"};
//            int izbor = JOptionPane.showOptionDialog(this,"Da li sigurno zelite da obrisete polaznika "
//                    +p.getIme()+" "+p.getPrezime()+"?","Dodavanje polaznika",
//                    JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcije,opcije[1]);
//
//            if(izbor == JOptionPane.YES_OPTION){
//                Connection conn = DatabaseConnection.getInstance();
//                Statement st = conn.createStatement();
//                String query4 = "SELECT id FROM evidencijacasa WHERE idPolaznika="+p.getId() +" AND idInstruktor="+i.getId();
//                ResultSet rs = st.executeQuery(query4);
//                rs.next();
//                Long idCasa = rs.getLong(1);
//                String query3 ="DELETE FROM stavkaevidencijecasa WHERE id="+idCasa;
//                st.executeUpdate(query3);
//                String query2 = "DELETE FROM evidencijacasa WHERE idInstruktor="+i.getId() +" AND idPolaznika="+p.getId();
//                st.executeUpdate(query2);
//                String query = "DELETE FROM polaznik WHERE id="+p.getId();
//                st.executeUpdate(query);
//                st.close();
//                cmbPolaznik.removeItem(p);
//                JOptionPane.showMessageDialog(null, "Polaznik "+p.getIme()+" "+p.getPrezime() +" uspesno obrisan.","Brisanje polaznika",JOptionPane.INFORMATION_MESSAGE);
//            

            
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnObrisiPolaznikActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
            new IzmenaPolaznika(this, true,i).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void cmbPolaznikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPolaznikActionPerformed
        try {
            // TODO add your handling code here:
            Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
            TableModel tm = tblCasovi.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            dtm.setRowCount(0);
            //lista stavki
            Connection conn = DatabaseConnection.getInstance();
            String query="SELECT * FROM stavkaevidencijecasa JOIN planobuke ON planobuke.id=stavkaevidencijecasa.idPlanObuke JOIN evidencijacasa ON evidencijacasa.id=stavkaevidencijecasa.id JOIN instruktor \n" +
                    "ON  evidencijacasa.idInstruktor=instruktor.id JOIN polaznik ON polaznik.id=evidencijacasa.idPolaznika \n" +
                    "WHERE instruktor.id=? AND polaznik.id=?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setLong(1, i.getId());
            ps.setLong(2, p.getId());
            ResultSet rs = ps.executeQuery();
            List<StavkaEvidencijeCasa> stavke = new LinkedList<StavkaEvidencijeCasa>();
            while(rs.next()){
                StavkaEvidencijeCasa stavka = new StavkaEvidencijeCasa
                        (rs.getLong("id"), rs.getLong("rb"), rs.getDate("datumCasa"), rs.getTime("vremePocetkaCasa").toLocalTime(),
                                rs.getTime("vremeKrajaCasa").toLocalTime(), rs.getInt("trajanjeCasa"), rs.getInt("cenaCasa"),
                                rs.getString("komentar"), new PlanObuke(rs.getLong("idPlanObuke"), rs.getString("naziv"), rs.getString("opis"), rs.getInt("trajanje")));
                
                stavke.add(stavka);
            }
            for(StavkaEvidencijeCasa s: stavke){
                Object[] red = new Object[]{s.getRb(),s.getDatumCasa(),s.getTrajanjeCasa(),s.getCenaCasa()};
                dtm.addRow(red);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbPolaznikActionPerformed

    private void btnObrisiCasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiCasActionPerformed
        // TODO add your handling code here:
        int selektovanRedovi[]={};
        selektovanRedovi=tblCasovi.getSelectedRows();
//        for(int i=0;i<selektovanRedovi.length;i++){
//        
//        }
    }//GEN-LAST:event_btnObrisiCasActionPerformed

    private void tblCasoviMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCasoviMouseClicked
        // TODO add your handling code here:
        btnObrisiCas.setEnabled(true);
    }//GEN-LAST:event_tblCasoviMouseClicked

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            DodavanjePlanaObuke pof=new DodavanjePlanaObuke(this, true);
            pof.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        try {
            new IzmenaPlanaObuke(this, true).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void btnIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmenaActionPerformed
        // TODO add your handling code here:
        if(btnIzmena.getText().equals("Omoguci izmenu")){
            txtIme.setEditable(true);
            txtPrezime.setEditable(true);
            txtBrTel.setEditable(true);
            txtDatumRodj.setEnabled(true);
            txtEmail.setEditable(true);
            cmbKategorija.setEnabled(true);

            btnIzmena.setText("Izmeni");
            return;
        }
        if(btnIzmena.getText().equals("Izmeni")){
            System.out.println("menjaj");
            //izmena, update
            Polaznik p = (Polaznik) cmbPolaznik.getSelectedItem();
            Object[] opcije = {"Da", "Ne"};
            int izbor = JOptionPane.showOptionDialog(this,"Da li sigurno zelite da izmenite podatke polaznika ?","Izmena polaznika",
            JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcije,opcije[1]);

        
        
            if(izbor == JOptionPane.YES_OPTION){
                try {
                    Connection conn = DatabaseConnection.getInstance();
                    Statement st = conn.createStatement();
                    java.util.Date datum = txtDatumRodj.getDate();
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String formatiranDatum = sdf.format(datum);
                    String query = "UPDATE polaznik SET ime='"+txtIme.getText()+"',prezime='"+txtPrezime.getText()+
                            "',email='"+txtEmail.getText()+"',brojTelefona='"+txtBrTel.getText()+
                            "',datumRodjenja='"+formatiranDatum+"',idKategorija="
                            +((Kategorija)cmbKategorija.getSelectedItem()).getId()
                            + " WHERE id="+p.getId();
                    st.executeUpdate(query);
                    String query2="UPDATE evidencijacasa SET idInstruktor="+i.getId()
                            +" WHERE idPolaznika="+p.getId();
                    st.executeUpdate(query2);
                    st.close();
                    JOptionPane.showMessageDialog(null, "Polaznik uspesno izmenjen.","Izmena polaznika",JOptionPane.INFORMATION_MESSAGE);
                    
                    
                    
                    
 
                } catch (SQLException ex) {
                    Logger.getLogger(Glavna.class.getName()).log(Level.SEVERE, null, ex);
                }
            btnIzmena.setText("Omoguci izmenu");
            txtIme.setEditable(false);
            txtPrezime.setEditable(false);
            txtBrTel.setEditable(false);
            txtDatumRodj.setEnabled(false);
            txtEmail.setEditable(false);
            cmbKategorija.setEnabled(false);
       }
    }
        
    }//GEN-LAST:event_btnIzmenaActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmena;
    private javax.swing.JButton btnObrisiCas;
    private javax.swing.JButton btnObrisiPolaznik;
    private javax.swing.JComboBox<Kategorija> cmbKategorija;
    private javax.swing.JComboBox<Polaznik> cmbPolaznik;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblInstruktor;
    private javax.swing.JMenu meniNalog;
    private javax.swing.JTable tblCasovi;
    private javax.swing.JTextField txtBrTel;
    private com.toedter.calendar.JDateChooser txtDatumRodj;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables
}
