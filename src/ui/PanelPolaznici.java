/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import domen.Instruktor;
import domen.Polaznik;
import domen.StavkaEvidencijeCasa;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kontroleri.KontrolerEvidencija;
import kontroleri.KontrolerInstruktor;
import kontroleri.KontrolerPolaznik;
import kontroleri.KontrolerStavke;

/**
 *
 * @author Windows HD
 */
public class PanelPolaznici extends javax.swing.JPanel {

    /**
     * Creates new form Panel1
     */
    Polaznik polaznik;
    Instruktor instruktor;
    Long rb=0l;
    public PanelPolaznici() throws SQLException {
        initComponents();
        napuniTabeluPolaznik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(32767, 0));
        jLabel1 = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(32767, 0));
        lblIzmenaLozinke = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(70, 0), new java.awt.Dimension(32767, 0));
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPolaznici = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        btnDodajCas1 = new javax.swing.JButton();
        btnIzmeniCas1 = new javax.swing.JButton();
        btnObrisiCas1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCasovi = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnDodajCas = new javax.swing.JButton();
        btnObrisiCas = new javax.swing.JButton();
        btnIzmeniCas = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(800, 450));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(565, 50));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel7.add(filler1);

        jLabel1.setText("Stranica za prikaz svih polaznika");
        jPanel7.add(jLabel1);
        jPanel7.add(filler3);
        jPanel7.add(lblIzmenaLozinke);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        jPanel8.add(filler2);

        jPanel2.add(jPanel8);

        add(jPanel2);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        tblPolaznici.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Prezime", "Email", "Broj telefona", "Datum rodjenja", "Kategorija", "Cena obuke", "Instruktor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPolaznici.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblPolaznici.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPolazniciMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPolaznici);

        jPanel1.add(jScrollPane1);

        jPanel9.setMaximumSize(new java.awt.Dimension(1500, 300));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout();
        flowLayout1.setAlignOnBaseline(true);
        jPanel9.setLayout(flowLayout1);

        btnDodajCas1.setForeground(new java.awt.Color(0, 153, 51));
        btnDodajCas1.setText("Dodaj polaznika");
        btnDodajCas1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDodajCas1.setPreferredSize(new java.awt.Dimension(250, 45));
        btnDodajCas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajCas1ActionPerformed(evt);
            }
        });
        jPanel9.add(btnDodajCas1);

        btnIzmeniCas1.setForeground(new java.awt.Color(0, 0, 255));
        btnIzmeniCas1.setText("Izmeni polaznika");
        btnIzmeniCas1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIzmeniCas1.setPreferredSize(new java.awt.Dimension(250, 45));
        btnIzmeniCas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniCas1ActionPerformed(evt);
            }
        });
        jPanel9.add(btnIzmeniCas1);

        btnObrisiCas1.setForeground(new java.awt.Color(255, 51, 51));
        btnObrisiCas1.setText("Ispisi polaznika");
        btnObrisiCas1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnObrisiCas1.setPreferredSize(new java.awt.Dimension(250, 45));
        btnObrisiCas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiCas1ActionPerformed(evt);
            }
        });
        jPanel9.add(btnObrisiCas1);

        jPanel1.add(jPanel9);

        jPanel4.add(jPanel1);

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 10));
        jPanel5.setMaximumSize(new java.awt.Dimension(500, 32767));
        jPanel5.setMinimumSize(new java.awt.Dimension(400, 49));
        jPanel5.setPreferredSize(new java.awt.Dimension(450, 423));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.PAGE_AXIS));

        tblCasovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum casa", "Vreme pocetka", "Vreme kraja", "Trajanje", "Plan rada"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCasovi);

        jPanel5.add(jScrollPane2);

        java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout();
        flowLayout3.setAlignOnBaseline(true);
        jPanel6.setLayout(flowLayout3);

        btnDodajCas.setForeground(new java.awt.Color(0, 153, 51));
        btnDodajCas.setText("Dodaj cas");
        btnDodajCas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDodajCas.setPreferredSize(new java.awt.Dimension(250, 45));
        btnDodajCas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajCasActionPerformed(evt);
            }
        });
        jPanel6.add(btnDodajCas);

        btnObrisiCas.setForeground(new java.awt.Color(255, 51, 51));
        btnObrisiCas.setText("Otkazi cas");
        btnObrisiCas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnObrisiCas.setPreferredSize(new java.awt.Dimension(250, 45));
        btnObrisiCas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiCasActionPerformed(evt);
            }
        });
        jPanel6.add(btnObrisiCas);

        btnIzmeniCas.setForeground(new java.awt.Color(0, 0, 255));
        btnIzmeniCas.setText("Izmeni cas");
        btnIzmeniCas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIzmeniCas.setPreferredSize(new java.awt.Dimension(250, 45));
        btnIzmeniCas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniCasActionPerformed(evt);
            }
        });
        jPanel6.add(btnIzmeniCas);

        jPanel5.add(jPanel6);

        jPanel4.add(jPanel5);

        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    private void tblPolazniciMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPolazniciMouseClicked
            
        try {
            if(tblPolaznici.getSelectedRow()!=-1){
                
                
            List<Polaznik> polaznici = KontrolerPolaznik.getList();
            polaznik = polaznici.get(tblPolaznici.getSelectedRow());
            instruktor = KontrolerInstruktor.getInstruktorPolaznika(polaznik);
            TableModel tm = tblCasovi.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            List<StavkaEvidencijeCasa> stavke=new LinkedList<>();
            if(instruktor!=null){
                stavke = KontrolerStavke.getList(polaznik);
            }
            dtm.setRowCount(0);
            for(StavkaEvidencijeCasa s: stavke){
                Object[] red = new Object[]{s.getDatumCasa(),s.getVremePocetkaCasa()+"h",
                    s.getVremeKrajaCasa()+"h",s.getTrajanjeCasa()+"min",s.getPlanObuke().getNaziv()};
                dtm.addRow(red);
            }
        }
        } catch (SQLException ex) {
            Logger.getLogger(PanelPolaznici.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblPolazniciMouseClicked

    private void btnDodajCasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajCasActionPerformed
        if(polaznik==null || instruktor==null){
            JOptionPane.showMessageDialog(null, "Selektujte polaznika kome dodajete casove","Greska",JOptionPane.ERROR_MESSAGE);
        }
        else{
            
        TableModel tm = tblCasovi.getModel();
        DefaultTableModel dtm =(DefaultTableModel) tm;

        try {
            rb=KontrolerStavke.getRb(KontrolerEvidencija.getId(instruktor, polaznik));
        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            DodavanjeCasova dcf = new DodavanjeCasova(null, true, instruktor, polaznik, rb);
            dcf.setVisible(true);
            dcf.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    try {
                        refreshMainTable();
                    } catch (SQLException ex) {
                        Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });
        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_btnDodajCasActionPerformed

    private void btnObrisiCasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiCasActionPerformed
        int selektovanRedovi[]={};
        selektovanRedovi=tblCasovi.getSelectedRows();
            if(selektovanRedovi.length==0){
        JOptionPane.showMessageDialog(this, "Izaberite cas za brisanje","Greska",JOptionPane.ERROR_MESSAGE);
    }else{
        Object[] opcije = {"Da", "Ne"};
        int izbor = JOptionPane.showOptionDialog(this,"Da li sigurno zelite da otkazete cas/ove?","Otkazivanje casova",
            JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcije,opcije[1]);

        if(izbor == JOptionPane.YES_OPTION){

            try {
                List<StavkaEvidencijeCasa> casovi = KontrolerStavke.getList(polaznik);

                selektovanRedovi=tblCasovi.getSelectedRows();
                TableModel tm = tblCasovi.getModel();
                DefaultTableModel dtm = (DefaultTableModel) tm;
                for(int i=0;i<dtm.getRowCount();i++){
                    for(int j=0;j<selektovanRedovi.length;j++){
                        if(i==selektovanRedovi[j]){
                            KontrolerStavke.otkazi(casovi.get(i));
                        }
                    }
                }
                JOptionPane.showMessageDialog(null, "Cas/ovi " +" uspesno otkazan/i.","Otkazivanje casova",JOptionPane.INFORMATION_MESSAGE);

                dtm.setRowCount(0);

                List<StavkaEvidencijeCasa> casovi2=KontrolerStavke.getList(polaznik);
                for(StavkaEvidencijeCasa s: casovi2){
                    Object[] red = new Object[]{s.getDatumCasa(),s.getVremePocetkaCasa()+"h",
                        s.getVremeKrajaCasa()+"h",s.getTrajanjeCasa()+"min",s.getPlanObuke().getNaziv()};
                    dtm.addRow(red);
                }

            } catch (SQLException ex) {
                Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }//GEN-LAST:event_btnObrisiCasActionPerformed

    private void btnIzmeniCasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniCasActionPerformed
        try {

            Integer selektovanRed;
            selektovanRed=tblCasovi.getSelectedRow();
        if(selektovanRed!=-1){
            TableModel tm = tblCasovi.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            StavkaEvidencijeCasa cas=new StavkaEvidencijeCasa();
            List<StavkaEvidencijeCasa> casovi = KontrolerStavke.getList(polaznik);
            for(int i=0;i<dtm.getRowCount();i++){
                if(i==selektovanRed){
                    cas = casovi.get(i);
                }
            }

            
                IzmenaCasova icf= new IzmenaCasova(null, true,cas);
                icf.setVisible(true);
                icf.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        try {
                            refreshMainTable();
                        } catch (SQLException ex) {
                            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
            else{
                JOptionPane.showMessageDialog(this, "Selektujete red za izmenu","Greska",JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnIzmeniCasActionPerformed

    private void btnDodajCas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajCas1ActionPerformed
        try {
            DodavanjePolaznika dpf = new DodavanjePolaznika(null, true);
            dpf.setVisible(true);
            dpf.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    try {
                        napuniTabeluPolaznik();
                    } catch (SQLException ex) {
                        Logger.getLogger(PanelPolaznici.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDodajCas1ActionPerformed

    private void btnIzmeniCas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniCas1ActionPerformed
        try {

            Integer selektovanRed;
            selektovanRed=tblPolaznici.getSelectedRow();
        if(selektovanRed!=-1){
            TableModel tm = tblPolaznici.getModel();
            DefaultTableModel dtm = (DefaultTableModel) tm;
            Polaznik p = new Polaznik();
            List<Polaznik> polaznici = KontrolerPolaznik.getList();
            for(int i=0;i<dtm.getRowCount();i++){
                if(i==selektovanRed){
                    p = polaznici.get(i);
                }
            }

                IzmenaPolaznika icf= new IzmenaPolaznika(null, true,p);
                icf.setVisible(true);
                icf.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {
                        try {
                            napuniTabeluPolaznik();
                        } catch (SQLException ex) {
                            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
            else{
                JOptionPane.showMessageDialog(this, "Selektujete red za izmenu","Greska",JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnIzmeniCas1ActionPerformed

    private void btnObrisiCas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiCas1ActionPerformed
               
        Integer selektovanRed;
        selektovanRed=tblPolaznici.getSelectedRow();
        if(selektovanRed!=-1){
        try {
            Object[] opcije = {"Da", "Ne"};
            int izbor = JOptionPane.showOptionDialog(this,"Da li sigurno zelite da ispisete polaznika "
                    +polaznik.getIme()+" "+polaznik.getPrezime()+"?","Ispisivanje polaznika",
                    JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcije,opcije[1]);

            if(izbor == JOptionPane.YES_OPTION){
                KontrolerPolaznik.ispisi(polaznik);
                napuniTabeluPolaznik();
                JOptionPane.showMessageDialog(null, "Polaznik "+polaznik.getIme()+" "+polaznik.getPrezime() +" uspesno ispisan.","Ispisivanje polaznika",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GlavnaAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{
            JOptionPane.showMessageDialog(this, "Selektujete red za brisanje","Greska",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiCas1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajCas;
    private javax.swing.JButton btnDodajCas1;
    private javax.swing.JButton btnIzmeniCas;
    private javax.swing.JButton btnIzmeniCas1;
    private javax.swing.JButton btnObrisiCas;
    private javax.swing.JButton btnObrisiCas1;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblIzmenaLozinke;
    private javax.swing.JTable tblCasovi;
    private javax.swing.JTable tblPolaznici;
    // End of variables declaration//GEN-END:variables

    private void napuniTabeluPolaznik() throws SQLException {
        TableModel tm = tblPolaznici.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);
        List<Polaznik> polaznici = KontrolerPolaznik.getList();
        Integer cenaObuke=0;
        Instruktor instruktor = new Instruktor();
        for(Polaznik p : polaznici){
            cenaObuke = KontrolerEvidencija.getCenaObuke(p);
            instruktor = KontrolerInstruktor.getInstruktorPolaznika(p);
            Object[] red = new Object[]{p.getIme(),p.getPrezime(),p.getEmail(),p.getBrojTelefona(),
            p.getDatumRodjenja(),p.getKategorija().getNaziv(),cenaObuke,instruktor};
            dtm.addRow(red);
        }
    }
    public void refreshMainTable() throws SQLException{
        TableModel tm = tblCasovi.getModel();
        DefaultTableModel dtm =(DefaultTableModel) tm;
        dtm.setRowCount(0);
        if(polaznik!=null && instruktor!=null){
            List<StavkaEvidencijeCasa> stavke = KontrolerStavke.getList(polaznik);
            for(StavkaEvidencijeCasa s: stavke){
                Object[] red = new Object[]{s.getDatumCasa(),s.getVremePocetkaCasa()+"h",
                    s.getVremeKrajaCasa()+"h",s.getTrajanjeCasa()+"min",s.getPlanObuke().getNaziv()};
                dtm.addRow(red);
            }
        }
    }
//        public void refreshPolazniciTable() throws SQLException{
//        TableModel tm = tblPolaznici.getModel();
//        DefaultTableModel dtm =(DefaultTableModel) tm;
//        dtm.setRowCount(0);
//        List<>
//    }
    

}
